#+TITLE: GNU Emacs Config
#+AUTHOR: Oskar Meyenburg
#+DESCRIPTION: Personal Emacs config
#+STARTUP: showeverything
#+OPTIONS: toc:2

* Config

** Elpaca Package Manager

#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.8)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                    ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                    ,@(when-let* ((depth (plist-get order :depth)))
                                                        (list (format "--depth=%d" depth) "--no-single-branch"))
                                                    ,(plist-get order :repo) ,repo))))
                    ((zerop (call-process "git" nil buffer t "checkout"
                                          (or (plist-get order :ref) "--"))))
                    (emacs (concat invocation-directory invocation-name))
                    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                          "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                    ((require 'elpaca))
                    ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))


  ;;;; Enable use-package support for elpaca

  ;; Install a package via the elpaca macro
  ;; See the "recipes" section of the manual for more details.

  ;; (elpaca example-package)

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode))

  ;;When installing a package used in the init file itself,
  ;;e.g. a package which adds a use-package key word,
  ;;use the :wait recipe keyword to block until that package is installed/configured.
  ;;For example:
  ;;(use-package general :ensure (:wait t) :demand t)

  ;; Expands to: (elpaca evil (use-package evil :demand t))
  ;;(use-package evil :ensure t :demand t)

  ;;Turns off elpaca-use-package-mode current declaration
  ;;Note this will cause evaluate the declaration immediately. It is not deferred.
  ;;Useful for configuring built-in emacs features.
  ;;(use-package emacs :ensure nil :config (setq ring-bell-function #'ignore))
#+end_src

** Evil

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    :config
    (evil-mode 1)
    (use-package evil-collection
      :after evil
      :config
      (evil-collection-init))
    (use-package evil-surround
      :config
      (global-evil-surround-mode 1)))
#+end_src

begin_src emacs-lisp
  ;; Bootstrap use-package
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)

  ;; Ensure use-package is installed
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)

  ;; Basic initialization
  (setq inhibit-startup-message t       ; Disable startup message
        ring-bell-function 'ignore      ; Disable bell
        gc-cons-threshold most-positive-fixnum) ; Optimize garbage collection

  (add-hook 'emacs-startup-hook
            (lambda () (setq gc-cons-threshold 800000)))

  ;; Lazy load Evil mode and related packages
  (use-package evil
    :init
    (setq evil-want-keybinding nil
          evil-want-integration t)
    :config
    (evil-mode 1)
    (use-package evil-collection
      :after evil
      :config (evil-collection-init))
    (use-package evil-surround
      :config (global-evil-surround-mode 1)))

  ;; Org-mode configuration
  (use-package org
    :config
    (setq org-startup-folded 'content)) ; Fold all Org content by default

  ;; Folding configuration
  ;; Enable outline minor mode for Emacs Lisp files
  (add-hook 'emacs-lisp-mode-hook 'outline-minor-mode)

  ;; Toggle fold with tab
  (global-set-key (kbd "<tab>") 'outline-toggle-children)

  ;; Display line numbers
  (global-display-line-numbers-mode 1)
end_src

** General Keybindings

#+begin_src emacs-lisp
  (elpaca general)
  (use-package general
    :config
    (general-evil-setup)

    ;; Set Space as the leader key
    (general-create-definer om/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "M-SPC")

    (om/leader-keys
      "b" '(:ignore t :wk "buffer")
      "bb" '(switch-to-buffer :wk "Switch buffer")
      "bk" '(kill-this-buffer :wk "Kill this buffer")
      "bn" '(next-buffer :wk "Next buffer")
      "bp" '(previous-buffer :wk "Previous buffer")
      "br" '(revert-buffer :wk "Reload buffer"))
  )
#+end_src

** General Options

#+begin_src emacs-lisp
;;  ;; Basic initialization
;;  (setq inhibit-startup-message t       ; Disable startup message
;;        ring-bell-function 'ignore      ; Disable bell
;;        gc-cons-threshold most-positive-fixnum) ; Optimize garbage collection
;;
;;  ;; Display line numbers
;;  (global-display-line-numbers-mode 1)
;;  (global-visual-line-mode t)
;;
;;  ;; Disable menu and tool and scroll bar
;;  (menu-bar-mode -1)
;;  (tool-bar-mode -1)
;;  (scroll-bar-mode -1)
#+end_src

** Which-key

#+begin_src emacs-lisp
;;  (use-package which-key
;;    :init
;;      (which-key-mode 1)
;;    :config
;;    (setq whick-key-side-window-location 'bottom
;;          whick-key-sort-order #'which-key-key-order-alpha
;;          whick-key-sort-uppercase-first nil
;;          whick-key-add-column-padding 1
;;          whick-key-max-display-columns nil
;;          whick-key-min-display-lines 6
;;          whick-key-side-window-slot -10
;;          whick-key-side-window-max-height 0.25
;;          whick-key-idle-delay 0.8
;;          whick-key-max-description length 25
;;          whick-key-allow-imprecise-window-fit t
;;          whick-key-separator " -> " ))
#+end_src
